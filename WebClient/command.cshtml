<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>@System.Configuration.ConfigurationManager.AppSettings["brandingTitle"]</title>
    <!--<meta name="viewport" content="width=device-width, initial-scale=1.0">-->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/style.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/knockout-2.2.0.js"></script>
    <script src="~/Scripts/websockets.js"></script>
    <script src="~/Scripts/ajax-lookups.js"></script>
    <script type="text/javascript" 
        src="http://maps.googleapis.com/maps/api/js?key=@System.Configuration.ConfigurationManager.AppSettings["googleApiKey"]&sensor=false">
    </script>
    <script src="~/Scripts/mapping.js"></script>
    <script type="text/javascript">

        var server = "@System.Configuration.ConfigurationManager.AppSettings["server"]";
        var apiKey = "@System.Configuration.ConfigurationManager.AppSettings["googleApiKey"]";

        function padTime(time) {
            if (time < 10)
                return "0" + time;
            return time;
        }

        function setStatus(status) {
            $("#status").html(status);
        }

        $(function () {
            ko.applyBindings(currentTrain, $("#trains").get(0));
            ko.applyBindings(currentStation, $("#stanox").get(0));

            connectWs();

            if (document.location.hash.length > 0) {
                setCommand(document.location.hash.substr(1));
            }
        });

        function TrainViewModel() {
            var self = this;

            self.Id = ko.observable();
            self.Headcode = ko.observable();
            self.ServiceCode = ko.observable();
            self.Activated = ko.observable();
            self.SchedOrigin = ko.observable();
            self.SchedDepart = ko.observable();
            self.Stops = ko.observableArray();
            self.LastUpdate = ko.observable();
            self.WttId = ko.observable();

            self.addStop = function (stop) {
                self.Stops.push(stop);
            };

            self.clearStops = function () {
                self.Stops.removeAll();
            }
        }

        function StopViewModel() {
            var self = this;

            self.Stanox = ko.observable();
            self.PlannedTime = ko.observable();
            self.ActualTimeStamp = ko.observable();
            self.EventType = ko.observable();
            self.Line = ko.observable();
            self.Platform = ko.observable();
            self.Delay = ko.observable();

            self.DelayResult = ko.computed(function () {
                if (this.Delay() == 0)
                    return "label-success";
                if (this.Delay() < 0)
                    return "label-info";
                if (this.Delay() > 10)
                    return "label-important";

                return "label-warning";
            }, self);

            self.DelayTitle = ko.computed(function () {
                if (this.Delay() == 0)
                    return "on time";
                if (this.Delay() < 0)
                    return "early";
                return "late";
            }, self);

            self.State = ko.observable();

            self.StateClass = ko.computed(function () {
                switch (this.State()) {
                    case 1:
                        return "warning";
                        break;
                    case 2:
                        return "error";
                        break;
                    default:
                        //case "Normal":
                        return "";
                }
            }, self);

            self.StateTitle = ko.computed(function () {
                switch (this.State()) {
                    case 1:
                        return "Terminated";
                        break;
                    case 2:
                        return "Cancelled";
                        break;
                    default:
                        //case "Normal":
                        return "";
                }
            }, self);
        }

        function StanoxSearchResultViewModel() {
            var self = this;

            self.Stanox = ko.observable();
            self.Trains = ko.observableArray();

            self.addTrain = function (train) {
                self.Trains.push(train);
            };

            self.clearTrains = function () {
                self.Trains.removeAll();
            }
        }

        var currentTrain = new TrainViewModel();
        var currentStation = new StanoxSearchResultViewModel();

        function formatDateString(d) {
            function pad(n) { return n < 10 ? '0' + n : n }
            return pad(d.getUTCDate()) + '/'
                + pad(d.getUTCMonth() + 1) + '/'
                + d.getUTCFullYear() + ' '
                + pad(d.getUTCHours()) + ':'
                + pad(d.getUTCMinutes()) + ':'
                + pad(d.getUTCSeconds());
        }

        function connectWs() {
            connect();

            ws.onmessage = function (msg) {

                var data = jQuery.parseJSON(msg.data);
                switch (data.Command) {
                    case "subtrainupdate":
                        data = data.Response;
                        currentTrain.LastUpdate(formatDateString(new Date()));
                        for (i in data) {
                            addStop(data[i]);
                            mapStop(data[i], true);
                        }
                        $(".tooltip-dynamic").tooltip();
                        break;
                    case "getservice":
                        currentStation.clearTrains();
                        currentStation.Stanox(data.Args);
                        data = data.Response;
                        for (i in data) {
                            currentStation.addTrain(data[i]);
                        }
                        break;
                    case "stanox":
                    case "crs":
                        currentStation.clearTrains();
                        data = data.Response;
                        currentStation.Stanox(data.Name);
                        for (i in data.TrainIds) {
                            currentStation.addTrain(data.TrainIds[i]);
                        }
                        break;
                }
            };
        }

        function wsOpenCommand() {
            parseCommand();
        }

        function addStop(stopEl) {
            var stop = new StopViewModel();
            stop.Stanox(stopEl.Stanox);

            var setTimes = true;
            if (stopEl.ActualTimeStamp && stopEl.ActualTimeStamp.length > 0) {
                var actualTime = new Date(stopEl.ActualTimeStamp);
                stop.ActualTimeStamp(formatDateString(actualTime));
            } else {
                stop.ActualTimeStamp("");
                setTimes = false;
            }

            if (stopEl.PlannedTime && stopEl.PlannedTime.length > 0) {
                var plannedTime = new Date(stopEl.PlannedTime);
                stop.PlannedTime(formatDateString(plannedTime));
            } else if (stopEl.ActualTimeStamp && stopEl.ActualTimeStamp.length > 0) {
                var plannedTime = new Date(stopEl.ActualTimeStamp);
                stop.PlannedTime(formatDateString(actualTime));
            } else {
                stop.PlannedTime("");
                setTimes = false;
            }

            if (setTimes) {
                stop.Delay((actualTime - plannedTime) / 60000);
            } else {
                stop.Delay(0);
            }

            stop.EventType(stopEl.EventType);
            stop.Line(stopEl.Line);
            stop.Platform(stopEl.Platform);

            stop.State(stopEl.State);

            // train terminated so unsubscribe
            if (stopEl.State == 1) {
                sendCommand("unsubtrain");
            }

            currentTrain.addStop(stop);

            fetchLocation(stopEl.Stanox);
        }

        function fetchLocation(stanox) {
            loadLocation(stanox, function (data) {
                var html = "";
                if (data.StationName) {
                    html = data.StationName;
                } else {
                    html = data.Tiploc;
                }
                if (data.CRS) {
                    html += "(" + data.CRS + ")";
                }
                $("." + data.Name).html(html);
                $("." + data.Name).attr('title', data.Description + '(' + data.Name + ')');
                $("." + data.Name).tooltip();
                $("." + data.Name).data("title", html);
            });
        }

        function clearData() {
            currentTrain.Id('');
            currentTrain.ServiceCode('');
            currentTrain.clearStops();
        }

        function sendCommand(resetSub) {
            if (resetSub) {
                ws.send("unsubtrain:");
            }
            var cmd = $("#filter-command").val();
            ws.send(cmd);
            document.location.hash = cmd;
        }

        function setCommand(command) {
            $("#filter-command").val(command);
            document.location.hash = command;
        }

        function loadStanox(el) {
            setCommand('stanox:' + $(el).attr('class'));
            sendCommand(true);
        }

        function loadTrainSub(el) {
            setCommand('subtrain:' + $(el).html());
            _currentTrainSub = $(el).html();
            sendCommand(true);
        }

        function parseCommand() {
            var cmdString = $("#filter-command").val();
            var idx = cmdString.indexOf(":");
            if (idx == -1)
                return;

            var cmd = cmdString.substring(0, idx);
            var args = cmdString.substring(idx + 1);

            switch (cmd) {
                case 'getservice':
                    getService(args);
                    return;
                    break;
                case 'gettrain':
                    getTrain(args);
                    return;
                    break;
                case 'subtrain':
                    getTrain(args, true);
                    // still send command
                    break;
            }
            sendCommand(true);
        }

        function getService(wttId) {
            setCommand('getservice:' + wttId);
            $.getJSON("http://" + server + ":82/Archive/?GetByWttId&wttId=" + wttId, function (data) {
                currentStation.clearTrains();
                currentStation.Stanox(wttId);
                for (i in data) {
                    /*var result = new WttSearchResult();
                    result.TrainId(data[i].TrainId);
                    result.WttId(data[i].WttId);
                    result.From(data[i].From);
                    result.Depart(data[i].Depart);
                    result.To('');
                    result.Arrive('');

                    currentWttResult.addTrain(result);

                    fetchLocation(data[i].From);*/
                    // TODO show properly
                    currentStation.addTrain(data[i].TrainId);
                }
            });
        }

        function getTrain(trainId, dontUnSub) {
            if (!dontUnSub) {
                ws.send("unsubtrain:");
                setCommand('gettrain:' + trainId);
            }
            $.getJSON("http://" + server + ":82/Archive/?GetTrainMovementById&trainId=" + trainId, function (data) {
                currentTrain.clearStops();
                currentTrain.Id(data.Id);
                currentTrain.Headcode(data.HeadCode);
                currentTrain.ServiceCode(data.ServiceCode);
                var activated = "";
                if (data.Activated) {
                    activated = formatDateString(new Date(data.Activated));
                }
                currentTrain.Activated(activated);
                if (data.WorkingTTId && data.WorkingTTId.length > 0) {
                    currentTrain.WttId(data.WorkingTTId.substring(0, data.WorkingTTId.length - 1));
                } else {
                    currentTrain.WttId('');
                }

                currentTrain.SchedOrigin(data.SchedOriginStanox);
                if (data.SchedOriginStanox && data.SchedOriginStanox.length > 0)
                    fetchLocation(data.SchedOriginStanox);
                var schedDepart = "";
                if (data.SchedOriginDeparture) {
                    schedDepart = formatDateString(new Date(data.SchedOriginDeparture));
                }
                currentTrain.SchedDepart(schedDepart);
                currentTrain.LastUpdate(formatDateString(new Date()));
                showCurrentTrainMap();
                for (i in data.Steps) {
                    addStop(data.Steps[i]);
                }
                $(".tooltip-dynamic").tooltip();
            });
        }

        var currentView = 'table';

        function switchView(view) {
            currentView = view;
            switch (currentView) {
                case 'table':
                    $("#tableView").show();
                    $("#map_canvas").hide();
                    break;
                case 'map':
                    $("#map_canvas").show();
                    $("#tableView").hide();
                    preLoadMap();
                    showCurrentTrainMap();
                    break;
            }
        }

        var markersArray = new Array();

        function showCurrentTrainMap() {
            clearMarkers();
            if (!currentTrain || currentTrain.Stops().length == 0) {
                return;
            }

            var stops = currentTrain.Stops();

            for (i in stops) {
                mapStop(stops[i]);
            }
            centreMap();
        }

        function mapStop(stop, centre) {
            try {
                var stanox = stop.Stanox();
                var ts = stop.ActualTimeStamp();
            } catch (err) {
                var stanox = stop.Stanox;
                var ts = stop.ActualTimeStamp;
            }
            $.ajax({
                type: "GET",
                url: "http://" + server + ":82/Stanox/",
                data: { id: stanox },
                dataType: "json",
                success: function (data) {
                    if (data.Lat && data.Lon) {
                        marker = new google.maps.Marker({
                            position: new google.maps.LatLng(data.Lat, data.Lon),
                            icon: {
                                path: google.maps.SymbolPath.CIRCLE,
                                scale: 3
                            },
                            draggable: false,
                            map: map,
                            title: $("." + stanox).data("title") + " - " + ts
                        });
                        markersArray.push(marker);
                    }
                },
                async: false
            });
            if (centre) {
                centreMap();
            }
        }

    </script>
    <style type="text/css">
        body {
            padding-top: 60px;
            padding-bottom: 40px;
        }

        .sidebar-nav {
            padding: 9px 0;
        }
    </style>
</head>
<body>
    <div class="navbar navbar-fixed-top">
        <div class="navbar-inner">
            <div class="container-fluid">
                <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </a>
                <a class="brand" href="#">@System.Configuration.ConfigurationManager.AppSettings["brandingTitle"]</a>
                <div class="nav-collapse collapse">
                    <ul class="nav">
                        <li><a href="~/index.cshtml">Live Feed</a></li>
                        <li class="active"><a href="#">Command Screen</a></li>
                        <li><a href="~/archivesearch.cshtml">Archive Search</a></li>
                    </ul>
                </div>
                <!--/.nav-collapse -->
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row-fluid">
            <div class="span3">
                <div class="well sidebar-nav" id="locationDetails">
                    <ul class="nav nav-list">
                        <li class="nav-header">Commands</li>
                        <li><a href="#getservice:" onclick="setCommand('getservice:');"><strong>Get Service:</strong> getservice:[wttid]</a></li>
                        <li><a href="#gettrain:" onclick="setCommand('gettrain:');"><strong>Get Train:</strong> gettrain:[train id]</a></li>
                        <li><a href="#subtrain:" onclick="setCommand('subtrain:');"><strong>Subscribe to Train:</strong> subtrain:[train id]</a></li>
                        <li><a href="#stanox:" onclick="setCommand('stanox:');"><strong>Get Location Trains:</strong> stanox:[stanox]</a></li>
                        <li><a href="#crs:" onclick="setCommand('crs:');"><strong>Get Location Trains:</strong> crs:[crs]</a></li>
                    </ul>
                </div>
                <div class="well sidebar-nav" id="stanox">
                    <ul class="nav nav-list">
                        <li class="nav-header">Trains: <span data-bind="text: Stanox"></span></li>
                    </ul>
                    <ul class="nav nav-list" data-bind="foreach: Trains" style="height: 600px; overflow: auto;">
                        <li><a data-bind="text: $data, attr: {onclick: 'getTrain(\'' + $data + '\');', href :'#gettrain:' + $data}"></a></li>
                    </ul>
                </div>
                <!--/.well -->
            </div>
            <!--/span3-->
            <div class="span9">
                <div class="btn-group fixed">
                    <div class="input-prepend">
                        <span class="add-on"><i class="icon-search"></i></span>
                        <input type="text" id="filter-command" class="span9" placeholder="Enter Command" />&nbsp;&nbsp;&nbsp;
                        <a class="btn btn-disconnect" id="btn_Command" onclick="parseCommand();" disabled="disabled" title="Send Command"><i class="icon-arrow-right"></i></a>
                        <a class="btn btn-connect" id="btn_Connect" onclick="connectWs()" title="Connect to server"><i class="icon-play"></i></a>
                        <a class="btn btn-disconnect" onclick="disconnect()" disabled="disabled" title="Disconnect from server"><i class="icon-stop"></i></a>
                        <a class="btn" href="#" title="Clear data" onclick="clearData();"><i class="icon-remove"></i></a>
                        <a class="btn" href="#" id="status">Connection Status</a>
                    </div>
                </div>
                <div id="trains" class="sub-command-bar">
                    <div class="row">
                        <div class="span4">
                            <h5>Service Details</h5>
                            <ul>
                                <li>Id: <a onclick="loadTrainSub(this);" data-bind="text: Id, attr: {href :'#subtrain:' + Id()}" title="Subscribe to train" style="display: inline;"></a></li>
                                <li>Headcode: <a data-bind="text: Headcode, attr: {href :'archivesearch.cshtml#list-hc:' + Headcode() }"></a></li>
                                <li>Service Code: <span data-bind="text: ServiceCode"></span></li>
                                <li>WTT ID:&nbsp;
                                    <a data-bind="text: WttId, attr: { onclick: 'getService(\'' + WttId() + '\');', href :'#getservice:' + WttId()}" title="View this WTT ID" style="display: inline;"></a>
                                    &nbsp;|&nbsp;
                                    <a data-bind="attr: {href :'archivesearch.cshtml#getservice:' + WttId()}" title="View this WTT ID history" style="display: inline;">View Archive</a>
                                </li>
                            </ul>
                        </div>
                        <div class="span4">
                            <h5>Locations</h5>
                            <ul>
                                <li>Scheduled Origin: <a onclick="loadStanox(this);" data-bind="text: SchedOrigin, css:SchedOrigin, attr: {href :'#stanox:' + SchedOrigin()}" style="display: inline;"></a></li>
                                <li>Scheduled Departure Time: <span data-bind="text: SchedDepart"></span></li>
                            </ul>
                        </div>
                        <div class="span4">
                            <h5>Updates</h5>
                            <ul>
                                <li>Activated: <span data-bind="text: Activated"></span></li>
                                <li>Last Update: <span data-bind="text: LastUpdate"></span></li>
                                <li>Current View:
                                    <a data-bind="attr: {href :'#gettrain:' + Id()}" onclick="switchView('table');" style="display: inline;">Tabular</a>
                                    &nbsp;|&nbsp; 
                                    <a data-bind="attr: {href :'#gettrain:' + Id()}" onclick="switchView('map');" style="display: inline;">Map</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div style="height: 600px; overflow: auto;">
                        <table class="table table-hover table-bordered" id="tableView">
                            <thead>
                                <tr>
                                    <th title="Click to load trains for the given location">Location</th>
                                    <th title="Expected time is tooltip. Delay is shown next to time">Time</th>
                                    <th>Action</th>
                                    <th>Line</th>
                                    <th>Platform</th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: Stops">
                                <tr data-bind="css: StateClass, attr: { title: StateTitle }">
                                    <td><a onclick="loadStanox(this);" data-bind="text: Stanox, css:Stanox, attr: {href :'#stanox:' + Stanox()}"></a></td>
                                    <td><span data-bind="text: ActualTimeStamp, attr: { title: PlannedTime }" class="tooltip-dynamic"></span>&nbsp;<span class="label" data-bind="text: Delay, css: DelayResult, attr: { title: DelayTitle }"></span></td>
                                    <td data-bind="text: EventType"></td>
                                    <td data-bind="text: Line"></td>
                                    <td data-bind="text: Platform"></td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="map" id="map_canvas" style="display: none; width: 100%; height: 100%"></div>
                    </div>
                </div>
            </div>
            <!--/span9-->
        </div>
        <!--/row-fluid-->
        <hr />
        <footer>
            <p>
                Copyright &copy; Michael Pritchard 2012. <a href="https://twitter.com/blueghostuk" class="twitter-follow-button" data-show-count="false">Follow @@blueghostuk</a>
                <script>!function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = "//platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } }(document, "script", "twitter-wjs");</script>
                <br />
                Contains information of Network Rail Infrastructure Limited licensed under the following licence:<br />
                <a href="http://www.networkrail.co.uk/data-feeds/terms-and-conditions" target="_blank" title="Opens in new window"><i class="icon-share-alt" title="Opens in new window"></i>www.networkrail.co.uk/data-feeds/terms-and-conditions</a>
                <br />
                Uses: <a href="http://twitter.github.com/bootstrap/" target="_blank"><i class="icon-share-alt" title="Opens in new window"></i>Twitter Bootstrap</a>, 
                <a href="http://alchemywebsockets.net/" target="_blank"><i class="icon-share-alt" title="Opens in new window"></i>Alchemy Websockets</a> (server-side).
                Source: on github <a href="https://github.com/blueghostuk/trainnotifier-server" target="_blank"><i class="icon-share-alt" title="Opens in new window"></i>server</a>,
                <a href="https://github.com/blueghostuk/trainnotifier-webclient" target="_blank"><i class="icon-share-alt" title="Opens in new window"></i>client</a>
            </p>
        </footer>
    </div>
</body>
</html>
